#!/usr/bin/env node
/**********************************************************

		File name   : www
		Description : Startup script of project

DATE	    PROGRAMMER		COMMENT
19/03/18    rbnishant       INITIAL VERSION

**********************************************************/

/**
 * Module dependencies.
 */
var app = require('./app');
var config = require('../config/settings');
var db = require('./db');
var http = require('http');
var NODE_ENV =  process.env.NODE_ENV;
var socketFunc = require('./socket');
import { logger } from '../config/logger';

/**
 * database initilization variables and function with username and password
 */
var dbConfig = config.env.development.mongodb;
if(NODE_ENV == "production")
	dbConfig = config.env.production.mongodb;

logger.info("Connecting to db: " + JSON.stringify(dbConfig));
db.connect(dbConfig, function (err, result) {
    if (err !== null) {
        logger.info('Cannot connect to MongoDB');
        logger.error(err);
    } else {
		logger.info("Connected to db");
    } 
});

/**
 * Create HTTP server.
 * Listen on provided port, on all network interfaces.
 */

var server = http.createServer(app);
server.listen(app.get('port'));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create a socket var for ui update
 */
var io = require('socket.io')(server);
io.on('connection', function(socket){
	socketFunc.start(io, socket);
});

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			logger.info(app.get('port') + ' requires elevated privileges')
			logger.error(app.get('port') + ' requires elevated privileges')
			console.error();
			process.exit(1);
			break;
		case 'EADDRINUSE':
			logger.info(app.get('port') + ' is already in use')
			logger.error(app.get('port') + ' is already in use')
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	logger.info('Listening on ' + bind + '...');
}
